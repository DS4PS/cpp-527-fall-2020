d %>%
group_by( NTMAJ12, TYPE ) %>%
summarise(n=n()) %>%
tidyr::spread( TYPE, n ) %>%
pander()
tab <-
table( d$NTMAJ12, d$TYPE ) %>%
prop.table( margin=1 ) %>%
round(2) %>%
as.data.frame()
tab
tidyr::spread( tab, Var2, Freq )
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( "M-M" ) %>%
pander()
tab <-
table( d$NTMAJ12, d$TYPE ) %>%
prop.table( margin=1 ) %>%
round(2) %>%
as.data.frame()
names(tab) <- c("Subsector","TransitionType","N")
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( "M-M" ) %>%
pander()
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( -"M-M" ) %>%
pander()
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( desc("M-M") ) %>%
pander()
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( - "M-M" ) %>%
pander()
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( desc("M-M") ) %>%
pander()
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( desc(M-M) ) %>%
pander()
tab %>%
tidyr::spread( TransitionType, N ) %>%
arrange( desc('M-M') ) %>%
pander()
args( order )
tab <-
table( d$NTMAJ12, d$TYPE ) %>%
prop.table( margin=1 ) %>%
round(2) %>%
as.data.frame()
names(tab) <- c("Subsector","TransitionType","N")
df <-
tab %>%
tidyr::spread( TransitionType, N )
df[ order(df,decreasing=T) , ] %>% pander()
tab <-
table( d$NTMAJ12, d$TYPE ) %>%
prop.table( margin=1 ) %>%
round(2) %>%
as.data.frame()
names(tab) <- c("Subsector","TransitionType","N")
table( d$TYPE )
df
df[ order(df[,4],decreasing=T) , ] %>% pander()
names(df)
df[ order(df[,5],decreasing=T) , ] %>% pander()
df[ order(df[,5],decreasing=T) , ] %>%
pander( table.emphasize.rownames=F )
df[ order(df[,5],decreasing=T) , ] %>%
pander( include.rownames=FALSE )
row.names(df) <- NULL
df[ order(df[,5],decreasing=T) , ] %>%
pander(  )
df[ order(df[,5],decreasing=T) , ] %>%
row.names(df) <- NULL %>%
pander(  )
args( row.names )
df[ order(df[,5],decreasing=T) , ] %>%
row.names(NULL) %>%
pander(  )
df <-
tab %>%
tidyr::spread( TransitionType, N )
df <- df[ order(df[,5],decreasing=T) , ]
row.names(df) <- NULL
df %>% pander(  )
df <-
tab %>%
tidyr::spread( TransitionType, N ) %>%
mutate( All.f = 'F-F' + 'M-F' )
df <-
tab %>%
tidyr::spread( TransitionType, N ) %>%
mutate( All.f = F-F + M-F )
d$TYPE <- gsub( "-", "_", d$TYPE )
table( d$TYPE )
# re-order to group female transitions
d$TYPE <- factor( d$TYPE, levels=c("F_F","M_F","F_M","M_M") )
tab <-
table( d$NTMAJ12, d$TYPE ) %>%
prop.table( margin=1 ) %>%
round(2) %>%
as.data.frame()
names(tab) <- c("Subsector","TransitionType","N")
df <-
tab %>%
tidyr::spread( TransitionType, N ) %>%
mutate( All.f = F_F + M_F )
df
df <-
tab %>%
tidyr::spread( TransitionType, N ) %>%
mutate( All.f = F_F + M_F,
All.m = F_M + M_M ) %>%
arrange( All.m ) %>%
pander()
df <-
tab %>%
tidyr::spread( TransitionType, N ) %>%
mutate( All.f = F_F + M_F,
All.m = F_M + M_M ) %>%
arrange( desc( All.m ) ) %>%
pander()
plot( df$All.m, pch=19, cex=2, type="b", xlim=c(0.4,1) )
plot( df$All.m, pch=19, cex=2, type="b", ylim=c(0.4,1) )
df
df <-
tab %>%
tidyr::spread( TransitionType, N ) %>%
mutate( All.f = F_F + M_F,
All.m = F_M + M_M ) %>%
arrange( desc( All.m ) )
df %>% pander()
plot( df$All.m, pch=19, cex=2, type="b", ylim=c(0.4,1) )
plot( df$All.m, pch=19, cex=2, type="b", ylim=c(0.4,0.8) )
abline( h=0.5, col="gray" )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.8), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.8), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, las=3 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.8), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, las=1 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.8), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.8), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90, pos=3 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.8), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90, pos=3, offset=1 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.9), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90, pos=3, offset=3 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,0.9), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90, pos=3, offset=3.5 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,1), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90, pos=3, offset=4 )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,1), bty="n",
xaxt="n", xlab="Subsectors",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90, pos=3, offset=4 )
par( mar=c(0,4,0,0) )
plot( df$All.m, pch=19, cex=2, type="b",
ylim=c(0.4,1), bty="n",
xaxt="n", xlab="",
ylab="Prob of New Hire Being Male")
abline( h=0.5, col="gray" )
text( 1:length(df$All.m), df$All.m, df$Subsector, srt=90, pos=3, offset=4 )
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F )
# need this installed to use
# genetic matching option in MatchIt
# install.packages("rgenoud")
# load package
library( MatchIt )
library( here )
library( dplyr )
#load LTDB data
d1 <- readRDS(here ( "data/data-rodeo/LTDB-2000.rds" ))
d2 <- readRDS(here ( "data/data-rodeo/LTDB-2010.rds" ))
md <- readRDS(here ( "data/data-rodeo/LTDB-META-DATA.rds" ))
#clean data
d1 <- select( d1, - year )
# need this installed to use
# genetic matching option in MatchIt
# install.packages("rgenoud")
# load package
library( MatchIt )
library( here )
library( dplyr )
#load LTDB data
d1 <- readRDS(here ( "data/data-rodeo/LTDB-2000.rds" ))
d2 <- readRDS(here ( "data/data-rodeo/LTDB-2010.rds" ))
md <- readRDS(here ( "data/data-rodeo/LTDB-META-DATA.rds" ))
#clean data
d1 <- select( d1, - year )
#clean data
d1 <- dplyr::select( d1, - year )
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, eval=F)
library( dplyr )
library( pander )
log( 10000 )  # fine
log(  1000 )  # fine
log(   100 )  # fine
log(    10 )  # fine
log(     1 )  # fing
log(     0 )  # uh oh
log(   -10 )  # not defined
source( "https://raw.githubusercontent.com/DS4PS/cpp-527-fall-2020/master/lectures/loop-example.R" )
head( d )                       # data frame with X and Y 
get_sample_slope( d, n=10 )     # returns a single value
test_for_null_slope( d, n=10 )  # returns a one-row data frame
get_sample_slope( d, n=10 )
head( d )
test_for_null_slope( d, n=10 )
slopes <- NULL  # collector vector 
for( i in 1:10 )  # iterator i
{
  b1 <- get_sample_slope( d, n=10 )
  slopes[ i ] <- b1   
}
slopes
slopes <- get_sample_slope( d, n=10 )
slopes
for( i in 1:10 )  # iterator i
{
  slopes <- NULL  # collector vector 
  b1 <- get_sample_slope( d, n=10 )
  slopes[ i ] <- b1   
}
slopes
slopes <- NULL  # collector vector
for( i in c(3,7,10) )  # iterator i
{
  b1 <- get_sample_slope( d, n=10 )
  slopes[ i ] <- b1   
}
slopes
slopes <- NULL  # collector vector
x <- 5
for( i in 1:1000 )  # iterator i
{
  b1 <- get_sample_slope( d, n=10 )
  slopes[ i ] <- b1  
  x <- i 
}
x <- 5
for( i in 1:10 )  # iterator i
{
  b1 <- get_sample_slope( d, n=10 )
  slopes[ i ] <- b1  
  x <- i 
}
slopes
slopes <- NULL  # collector vector
x <- 5
for( i in 1:10 )  # iterator i
{
  b1 <- get_sample_slope( d, n=10 )
  slopes[ i ] <- b1  
  x <- i 
}
slopes
x
x <- 1:10
x
c( x, 43 )
x <- c( x, 43 )
x
m <- lm( y ~ x, data=d )
summary( m )
class( m )
names( m )
m$coefficients 
m$residuals 
names( m )
models <- NULL  # collector vector 
for( i in 1:10 )  # iterator i
{
  m <- lm( y ~ x, data=d )
  models[ i ] <- m  
}
models 
models <- list() # collector vector 
for( i in 1:10 )  # iterator i
{
  m <- lm( y ~ x, data=d )
  models[[ i ]] <- m  
}
models
m
models[[1]]
names( models[[1]] )
feed_pig <- function( weight )
{  weight + 1 }
pig.weight <- 100
loop.count <- 1
while( pig.weight < 110 )
{
  new.weight <- feed_pig( pig.weight )
  old.weight <- c( old.weight, new.weight )
  pig.weight <- new.weight
  print( pig.weight )
}
old.weight <- pig.weight
while( pig.weight < 110 )
{
  new.weight <- feed_pig( pig.weight )
  old.weight <- c( old.weight, new.weight )
  pig.weight <- new.weight
  print( pig.weight )
}
pig.weight <- 100
old.weight <- pig.weight
while( pig.weight < 110 )
{
  new.weight <- feed_pig( pig.weight )
  old.weight <- c( old.weight, new.weight )
  # pig.weight <- new.weight
  print( pig.weight )
}
head( old.weight )
length( old.weight )
head( old.weight, 25 )
pig.weight <- 100
old.weight <- pig.weight
while( pig.weight < 110 )
{
  new.weight <- feed_pig( pig.weight )
  old.weight <- c( old.weight, new.weight )
  pig.weight <- new.weight
  print( pig.weight )
}
old.weight 
pig.weight
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
cash <- 10  
results <- NULL
count <- 1  
while( cash > 0 )
{
  cash <- cash +   
    sample( c(-1,0,1), size=1 )  
  results[count] <- cash  
  count <- count + 1  
}
results
x <- c("MON","TUE","WED","THUR","FRI","SAT","SUN")
vec <- sample( x, 100, replace=TRUE )
vec
f <- factor( vec )
table( f )
table( f ) %>% prop.table()
library( dplyr )
table( f ) %>% prop.table()
levels( f )
vec
unique( vec )
f2 <- f[ f %in% c("MON","TUE","WED","THUR","FRI") ]
table( f2 )
levels( f2 )
f2 <- factor( f2 )
table( f2 )
unique( f2 )
unique( as.character(f2) )
x <- c("TUE","WED","FRI","SUN")
vec <- sample( x, 20, replace=TRUE )
f3 <- factor( vec )
table( f3 )
vec 
all.days <- c("MON","TUE","WED","THUR","FRI","SAT","SUN")
f3 <- factor( f3, levels=all.days )
table( f3 )
x <- c("TUE","WED","FRI","SUN")
vec <- sample( x, 20, replace=TRUE )
unique( as.character( vec ) )
vec
x <- sample( 1:3, size=20, replace=T )
x
f <- factor( x, levels=c("blue","red","green") )
f
x
x <- as.character( x )
f <- factor( x, levels=c("blue","red","green") )
f
args( factor )
